name: Build ruleset and geodata
on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"
      - "**/*.ini"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "update_version=$(date -d '+8 hours' +%Y-%m-%d)" >> ${GITHUB_ENV}
          echo "update_time=$(date -d '+8 hours' +'%Y-%m-%d %H:%M:%S')" >> ${GITHUB_ENV}
          echo "singbox_core_release_version=$(curl -sSL https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r '.tag_name' | sed -E 's/([0-9]+)$/0/')" >> ${GITHUB_ENV}
          echo "singbox_core_last1_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/ {last=$0} END {print last}' | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_core_last2_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/{lines[++count]=$0} END{print lines[count-1]}' | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_core_last3_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/{lines[++count]=$0} END{print lines[count-2]}' | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_rules_last1_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/ {last=$0} END {print last}' | sed -n 's/^<li>\([0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_rules_last2_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/{lines[++count]=$0} END{print lines[count-1]}' | sed -n 's/^<li>\([0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_rules_last3_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/{lines[++count]=$0} END{print lines[count-2]}' | sed -n 's/^<li>\([0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "domains_download_url=https://raw.githubusercontent.com/Yat-Muk/domain-list-custom/domains" >> ${GITHUB_ENV}
          echo "ips_download_url=https://raw.githubusercontent.com/Yat-Muk/geoip/ips" >> ${GITHUB_ENV}
        shell: bash

      - name: Clone Repository
        uses: actions/checkout@v5

      - name: Checkout DustinWin/domain-list-custom
        uses: actions/checkout@v5
        with:
          repository: DustinWin/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v5
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum

      - name: Generate `mihomo` geodata
        run: |
          mkdir -p ./community/mydata/
          archs1=(private ads trackerslist microsoft-cn apple-cn google-cn games-cn media games ai networktest tld-proxy gfw proxy cn)
          archs2=(private ads trackerslist microsoft-cn apple-cn google-cn games-cn ai networktest tld-proxy gfw proxy cn)
          archs3=(private microsoft-cn apple-cn google-cn games-cn tld-proxy gfw cn-lite)

          cd ./community/
          for arch1 in "${archs1[@]}"; do
            curl -sSL "${domains_download_url}/${arch1}.list" | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' -e 's/DOMAIN-KEYWORD,/keyword:/' -e 's/DOMAIN-REGEX,/regexp:/' > "./mydata/${arch1}"
          done
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '!/^DOMAIN-REGEX,/' | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' > ./mydata/fakeip-filter
          cat <<EOF >> ./mydata/fakeip-filter
          keyword:ntp
          keyword:stun
          keyword:time
          EOF
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '/^DOMAIN-REGEX,/ && !/ntp|stun|time/' | sed 's/DOMAIN-REGEX,/regexp:/' >> ./mydata/fakeip-filter
          go run ./ --datapath=./mydata/ --outputname geosite-all.dat

          rm -f ./mydata/ads ./mydata/fakeip-filter
          curl -sSL "${domains_download_url}/fakeip-filter-lite.list" | awk '!/^DOMAIN-REGEX,/' | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' > ./mydata/fakeip-filter-lite
          cat <<EOF >> ./mydata/fakeip-filter-lite
          keyword:ntp
          keyword:stun
          keyword:time
          EOF
          go run ./ --datapath=./mydata/ --outputname geosite-all-lite.dat

          rm -f ./mydata/*
          for arch2 in "${archs2[@]}"; do
            curl -sSL "${domains_download_url}/${arch2}.list" | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' -e 's/DOMAIN-KEYWORD,/keyword:/' -e 's/DOMAIN-REGEX,/regexp:/' > "./mydata/${arch2}"
          done
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '!/^DOMAIN-REGEX,/' | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' > ./mydata/fakeip-filter
          cat <<EOF >> ./mydata/fakeip-filter
          keyword:ntp
          keyword:stun
          keyword:time
          EOF
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '/^DOMAIN-REGEX,/ && !/ntp|stun|time/' | sed 's/DOMAIN-REGEX,/regexp:/' >> ./mydata/fakeip-filter
          go run ./ --datapath=./mydata/ --outputname geosite.dat

          rm -f ./mydata/ads ./mydata/fakeip-filter
          curl -sSL "${domains_download_url}/fakeip-filter-lite.list" | awk '!/^DOMAIN-REGEX,/' | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' > ./mydata/fakeip-filter-lite
          cat <<EOF >> ./mydata/fakeip-filter-lite
          keyword:ntp
          keyword:time
          keyword:stun
          EOF
          go run ./ --datapath=./mydata/ --outputname geosite-lite.dat

          rm -f ./mydata/*
          for arch3 in "${archs3[@]}"; do
            curl -sSL "${domains_download_url}/${arch3}.list" | sed -e 's/DOMAIN,/full:/' -e 's/DOMAIN-SUFFIX,//' -e 's/DOMAIN-KEYWORD,/keyword:/' -e 's/DOMAIN-REGEX,/regexp:/' > "./mydata/${arch3}"
          done
          mv -f ./mydata/cn-lite ./mydata/cn
          go run ./ --datapath=./mydata/ --outputname geosite-mini.dat

      - name: Generate `sing-box` geodata
        run: |
          cd ./community/ || exit 1
          go install -trimpath -ldflags="-s -w -buildid=" github.com/metacubex/geo/cmd/geo@master
          for file in $(ls *.dat | sed 's/\.dat$//'); do
            geo convert site -i v2ray -o sing -f "./${file}.db" "./${file}.dat"
          done

      - name: Get geoip relative files
        run: |
          mkdir -p ./mihomo-geodata/ ./sing-box-geodata/
          mihomo_mmdb=($(curl -sSL https://api.github.com/repos/DustinWin/geoip/releases | grep '"browser_download_url"' | grep '.mmdb' | awk -F '"' '{print $4}'))
          count_mihomo_mmdb=${#mihomo_mmdb[@]}
          for ((i = 0; i < count_mihomo_mmdb; i++)); do
            wget -P ./mihomo-geodata/ "${mihomo_mmdb[i]}"
          done
          mihomo_others=($(curl -sSL https://api.github.com/repos/DustinWin/geoip/releases | grep '"browser_download_url"' | grep '/mihomo-geodata/' | grep -v '.mmdb' | awk -F '"' '{print $4}'))
          count_mihomo_others=${#mihomo_others[@]}
          for ((i = 0; i < count_mihomo_others; i++)); do
            wget -P ./community/ "${mihomo_others[i]}"
          done
          singbox_all=($(curl -sSL https://api.github.com/repos/DustinWin/geoip/releases | grep '"browser_download_url"' | grep '/sing-box-geodata/' | awk -F '"' '{print $4}'))
          count_singbox_all=${#singbox_all[@]}
          for ((i = 0; i < count_singbox_all; i++)); do
            wget -P ./community/ "${singbox_all[i]}"
          done

      - name: Move `mihomo` and `sing-box` geodata files
        run: |
          cd ./community/ || exit 1
          for file in $(ls *.dat *.metadb); do
            install -Dp "./${file}" ../mihomo-geodata/
          done
          for file in $(ls *.db); do
            install -Dp "./${file}" ../sing-box-geodata/
          done
          rm -rf ../custom* ../community*

      - name: Download `mihomo` rule-set files
        run: |
          mkdir -p ./mihomo-ruleset/
          domains=(ads trackerslist microsoft-cn apple-cn google-cn games-cn netflix disney max primevideo appletv applenews applemusic apple_classical google youtube tiktok bilibili spotify media games ai networktest tld-proxy gfw proxy cn cn-lite adobe hulu telegram youtubemusic twitter truthSocial github gitlab cloudflare binance douyin duolingo facebook instagram shopee wechat binance)
          ips=(netflixip mediaip gamesip privateip cnip telegramip adsip)

          for domain in "${domains[@]}"; do
            mkdir -p "./tools/domains/${domain}/"
            curl -sSL "${domains_download_url}/${domain}.list" | \
              grep -E '^(DOMAIN,|DOMAIN-SUFFIX,)' | \
              sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/\+\./' \
              > "./tools/domains/${domain}/${domain}.list"
            if [ ! -s "./tools/domains/${domain}/${domain}.list" ]; then
               echo "Warning: Filtered list for ${domain} is empty. Removing."
               rm -f "./tools/domains/${domain}/${domain}.list"
               rmdir --ignore-fail-on-non-empty "./tools/domains/${domain}/"
            fi
          done

          mkdir -p ./tools/domains/fakeip-filter/
          curl -sSL "${domains_download_url}/fakeip-filter.list" | \
            grep -E '^(DOMAIN,|DOMAIN-SUFFIX,)' | \
            sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/\+\./' \
            > "./tools/domains/fakeip-filter/fakeip-filter.list"
          if [ ! -s "./tools/domains/fakeip-filter/fakeip-filter.list" ]; then
             echo "Warning: Filtered list for fakeip-filter is empty. Removing."
             rm -f "./tools/domains/fakeip-filter/fakeip-filter.list"
             rmdir --ignore-fail-on-non-empty "./tools/domains/fakeip-filter/"
          fi

          mkdir -p ./tools/domains/fakeip-filter-lite/
           curl -sSL "${domains_download_url}/fakeip-filter-lite.list" | \
            grep -E '^(DOMAIN,|DOMAIN-SUFFIX,)' | \
            sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/\+\./' \
            > "./tools/domains/fakeip-filter-lite/fakeip-filter-lite.list"
          if [ ! -s "./tools/domains/fakeip-filter-lite/fakeip-filter-lite.list" ]; then
             echo "Warning: Filtered list for fakeip-filter-lite is empty. Removing."
             rm -f "./tools/domains/fakeip-filter-lite/fakeip-filter-lite.list"
             rmdir --ignore-fail-on-non-empty "./tools/domains/fakeip-filter-lite/"
          fi

           mkdir -p ./tools/domains/private/
           curl -sSL "${domains_download_url}/private.list" | \
            grep -E '^(DOMAIN,|DOMAIN-SUFFIX,)' | \
            sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/\+\./' \
            > "./tools/domains/private/private.list"
          if [ ! -s "./tools/domains/private/private.list" ]; then
             echo "Warning: Filtered list for private is empty. Removing."
             rm -f "./tools/domains/private/private.list"
             rmdir --ignore-fail-on-non-empty "./tools/domains/private/"
          fi

          curl -sSL "${domains_download_url}/applications.list" > ./mihomo-ruleset/applications.list

          for ip in "${ips[@]}"; do
            mkdir -p "./tools/ips/${ip}/"
            download_source_url=""
            if [[ "$ip" == "adsip" ]]; then
              download_source_url="${domains_download_url}/${ip}.list"
            else
              download_source_url="${ips_download_url}/${ip}.list"
            fi

            curl -sSL "${download_source_url}" | \
              grep -E '^(IP-CIDR,|IP-CIDR6,)' | \
              sed 's/^IP-CIDR,\|^IP-CIDR6,//' \
              > "./tools/ips/${ip}/${ip}.list"

             if [ ! -s "./tools/ips/${ip}/${ip}.list" ]; then
               echo "Warning: Filtered list for ${ip} is empty. Removing."
               rm -f "./tools/ips/${ip}/${ip}.list"
               rmdir --ignore-fail-on-non-empty "./tools/ips/${ip}/"
            fi
          done

          rm -rf ./tmp/

      - name: Download `sing-box` rule_set files
        run: |
          mkdir -p ./tmp/ # Ensure tmp directory exists
          domains=(ads trackerslist microsoft-cn apple-cn google-cn games-cn netflix disney max primevideo appletv applenews applemusic apple_classical google youtube tiktok bilibili spotify media games ai networktest tld-proxy gfw proxy cn cn-lite adobe hulu telegram youtubemusic twitter truthSocial github gitlab cloudflare binance douyin duolingo facebook instagram shopee wechat binance)
          ips=(netflixip mediaip gamesip privateip cnip telegramip adsip)

          for domain in "${domains[@]}"; do
            mkdir -p "./tools/rules/${domain}/"
            curl -sSL "${domains_download_url}/${domain}.list" > "./tools/rules/${domain}/${domain}.list"
          done

          mkdir -p ./tools/rules/fakeip-filter/
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '!/^DOMAIN-REGEX,/' > ./tmp/temp-fakeip-filter-rules.txt
          cat <<EOF >> ./tmp/temp-fakeip-filter-rules.txt
          DOMAIN-KEYWORD,ntp
          DOMAIN-KEYWORD,stun
          DOMAIN-KEYWORD,time
          EOF
          curl -sSL "${domains_download_url}/fakeip-filter.list" | awk '/^DOMAIN-REGEX,/ && !/ntp|stun|time/' >> ./tmp/temp-fakeip-filter-rules.txt
          sort --ignore-case ./tmp/temp-fakeip-filter-rules.txt > ./tools/rules/fakeip-filter/fakeip-filter.list

          mkdir -p ./tools/rules/fakeip-filter-lite/
          curl -sSL "${domains_download_url}/fakeip-filter-lite.list" | awk '!/^DOMAIN-REGEX,/' > ./tmp/temp-fakeip-filter-lite-rules.txt
          cat <<EOF >> ./tmp/temp-fakeip-filter-lite-rules.txt
          DOMAIN-KEYWORD,ntp
          DOMAIN-KEYWORD,stun
          DOMAIN-KEYWORD,time
          EOF
          sort --ignore-case ./tmp/temp-fakeip-filter-lite-rules.txt > ./tools/rules/fakeip-filter-lite/fakeip-filter-lite.list

          mkdir -p ./tools/rules/applications/
          curl -sSL "${domains_download_url}/applications.list" > "./tools/rules/applications/applications.list"

          for ip in "${ips[@]}"; do
            mkdir -p "./tools/rules/${ip}/"
            download_source_url=""
            if [[ "$ip" == "adsip" ]]; then
              download_source_url="${domains_download_url}/${ip}.list"
            else
              download_source_url="${ips_download_url}/${ip}.list"
            fi
            curl -sSL "${download_source_url}" > "./tools/rules/${ip}/${ip}.list"
          done

          rm -rf ./tmp*

      - name: Generate `mihomo` rule-set (yaml)
        run: |
          set -eo pipefail

          mkdir -p ./mihomo-ruleset-yaml/

          domains=(trackerslist microsoft-cn apple-cn google-cn games-cn netflix disney max primevideo appletv applenews applemusic apple_classical google youtube tiktok bilibili spotify media games ai networktest tld-proxy gfw proxy cn cn-lite adobe hulu telegram youtubemusic twitter truthSocial github gitlab cloudflare binance douyin duolingo facebook instagram shopee wechat binance)
          ips=(netflixip mediaip gamesip privateip cnip telegramip)

          generate_yaml_ruleset() {
            local item_name=$1
            local download_url=$2
            local output_file="./mihomo-ruleset-yaml/${item_name}.yaml"
            echo "Generating YAML ruleset for: ${item_name}"
            local content
            content=$(curl -sSL "${download_url}" | grep -E '^(DOMAIN|IP-CIDR|PROCESS-NAME|DOMAIN-KEYWORD|DOMAIN-SUFFIX|DOMAIN-REGEX)' || true)
            local count_domain count_keyword count_suffix count_ipcidr count_process count_regex total
            count_domain=$(echo "${content}" | grep -c '^DOMAIN,' || true)
            count_keyword=$(echo "${content}" | grep -c '^DOMAIN-KEYWORD,' || true)
            count_suffix=$(echo "${content}" | grep -c '^DOMAIN-SUFFIX,' || true)
            count_ipcidr=$(echo "${content}" | grep -c '^IP-CIDR' || true)
            count_process=$(echo "${content}" | grep -c '^PROCESS-NAME,' || true)
            count_regex=$(echo "${content}" | grep -c '^DOMAIN-REGEX,' || true)
            total=$((count_domain + count_keyword + count_suffix + count_ipcidr + count_process + count_regex))
            local name
            name=$(echo "${item_name}" | sed -e "s/^\(.\)/\U\1/")
            {
              echo "# NAME: ${name}"
              echo "# AUTHOR: Yat-Muk"
              echo "# REPO: https://github.com/Yat-Muk/ruleset_geodata"
              echo "# UPDATED: ${{ env.update_time }}"
              echo "# DOMAIN: ${count_domain}"
              echo "# DOMAIN-KEYWORD: ${count_keyword}"
              echo "# DOMAIN-SUFFIX: ${count_suffix}"
              echo "# DOMAIN-REGEX: ${count_regex}"
              echo "# IP-CIDR: ${count_ipcidr}"
              echo "# PROCESS-NAME: ${count_process}"
              echo "# TOTAL: ${total}"
              echo "payload:"
            } > "${output_file}"
            if [ -n "${content}" ]; then
              echo "${content}" | sort | sed 's/^/  - /' >> "${output_file}"
            fi
          }

          generate_merged_ads_ruleset() {
            echo "Generating MERGED YAML ruleset for: ads"
            local item_name="ads"
            local output_file="./mihomo-ruleset-yaml/${item_name}.yaml"
            local content_domain content_ip content
            content_domain=$(curl -sSL "${domains_download_url}/ads.list" | grep -E '^(DOMAIN|IP-CIDR|PROCESS-NAME|DOMAIN-KEYWORD|DOMAIN-SUFFIX|DOMAIN-REGEX)' || true)
            content_ip=$(curl -sSL "${domains_download_url}/adsip.list" | grep -E '^(IP-CIDR,|IP-CIDR6,)' || true)
            content=$(echo -e "${content_domain}\n${content_ip}" | grep . || true)
            local count_domain count_keyword count_suffix count_ipcidr count_process count_regex total
            count_domain=$(echo "${content}" | grep -c '^DOMAIN,' || true)
            count_keyword=$(echo "${content}" | grep -c '^DOMAIN-KEYWORD,' || true)
            count_suffix=$(echo "${content}" | grep -c '^DOMAIN-SUFFIX,' || true)
            count_ipcidr=$(echo "${content}" | grep -c -E '^IP-CIDR' || true)
            count_process=$(echo "${content}" | grep -c '^PROCESS-NAME,' || true)
            count_regex=$(echo "${content}" | grep -c '^DOMAIN-REGEX,' || true)
            total=$((count_domain + count_keyword + count_suffix + count_ipcidr + count_process + count_regex))
            {
              echo "# NAME: Ads"
              echo "# AUTHOR: Yat-Muk"
              echo "# REPO: https://github.com/Yat-Muk/ruleset_geodata"
              echo "# UPDATED: ${{ env.update_time }}"
              echo "# DOMAIN: ${count_domain}"
              echo "# DOMAIN-KEYWORD: ${count_keyword}"
              echo "# DOMAIN-SUFFIX: ${count_suffix}"
              echo "# DOMAIN-REGEX: ${count_regex}"
              echo "# IP-CIDR: ${count_ipcidr}"
              echo "# PROCESS-NAME: ${count_process}"
              echo "# TOTAL: ${total}"
              echo "payload:"
            } > "${output_file}"
            if [ -n "${content}" ]; then
              echo "${content}" | sort | sed 's/^/  - /' >> "${output_file}"
            fi
          }

          for item in "${domains[@]}"; do
            generate_yaml_ruleset "${item}" "${domains_download_url}/${item}.list"
          done
          generate_yaml_ruleset "applications" "${domains_download_url}/applications.list"
          generate_yaml_ruleset "fakeip-filter" "${domains_download_url}/fakeip-filter.list"
          generate_yaml_ruleset "fakeip-filter-lite" "${domains_download_url}/fakeip-filter-lite.list"
          for item in "${ips[@]}"; do
             if [[ "$item" != "adsip" ]]; then # adsip is handled by merge function
               generate_yaml_ruleset "${item}" "${ips_download_url}/${item}.list"
             fi
          done
          generate_merged_ads_ruleset

      - name: Generate `mihomo` rule-set (mrs) and move .list files
        run: |
          curl -L https://github.com/DustinWin/proxy-tools/releases/download/mihomo/mihomo-meta-linux-amd64v3.tar.gz | tar -zx -C ./tools/
          mv -f ./tools/CrashCore ./tools/mihomo
          cd ./tools/
          chmod +x ./mihomo

          domain_files=($(find ./domains/ -maxdepth 2 -name '*.list' -type f 2>/dev/null))
          for file_path in "${domain_files[@]}"; do
             dir_name=$(basename $(dirname "$file_path"))
             if [ -s "$file_path" ]; then
                echo "Converting domain ruleset: ${dir_name}"
                ./mihomo convert-ruleset domain text "$file_path" "../mihomo-ruleset/${dir_name}.mrs"
             else
                echo "Skipping empty domain list file: $file_path"
             fi
             mv -f "$file_path" ../mihomo-ruleset/
          done

          ip_files=($(find ./ips/ -maxdepth 2 -name '*.list' -type f 2>/dev/null))
           for file_path in "${ip_files[@]}"; do
             dir_name=$(basename $(dirname "$file_path"))
             if [ -s "$file_path" ]; then
                echo "Converting ipcidr ruleset: ${dir_name}"
                ./mihomo convert-ruleset ipcidr text "$file_path" "../mihomo-ruleset/${dir_name}.mrs"
             else
               echo "Skipping empty ip list file: $file_path"
             fi
             mv -f "$file_path" ../mihomo-ruleset/
          done

          find ./domains/ ./ips/ -maxdepth 1 -mindepth 1 -type d -empty -delete 2>/dev/null
          rm -rf ./mihomo* ./domains/ ./ips/

      - name: Generate `sing-box` rule_set (srs) and move .json files
        run: |
          if [[ "${{ env.singbox_core_last1_version }}" == "${{ env.singbox_core_release_version }}" ]]; then
            echo "singbox_core_old_version=${{ env.singbox_core_last2_version }}" >> $GITHUB_ENV
            echo "singbox_core_new_version=${{ env.singbox_core_last1_version }}" >> $GITHUB_ENV
            echo "singbox_ruleset_old_version=${{ env.singbox_rules_last2_version }}" >> $GITHUB_ENV
            echo "singbox_ruleset_new_version=${{ env.singbox_rules_last1_version }}" >> $GITHUB_ENV
            echo "singbox_equal=true" >> $GITHUB_ENV

            curl -L "https://github.com/SagerNet/sing-box/releases/download/v${{ env.singbox_core_last2_version }}/sing-box-${{ env.singbox_core_last2_version }}-linux-amd64.tar.gz" | tar -zx -C ./tools/
            mv -f "./tools/sing-box-${{ env.singbox_core_last2_version }}-linux-amd64/sing-box" ./tools/sing-box
            mkdir -p ./sing-box-ruleset-compatible/
            cd ./tools/
            # Assuming convert.sh exists and works as intended
            if [[ -f "./convert.sh" ]]; then
              sed -i 's/"version": 1/"version": ${{ env.singbox_rules_last2_version }}/' ./convert.sh
              chmod +x ./convert.sh && ./convert.sh
              mv -f ./*.json ./*.srs ../sing-box-ruleset-compatible/
            else
              echo "Error: convert.sh not found in ./tools/"
              exit 1
            fi
            rm -rf ./sing-box*

            cd ../
            curl -L "https://github.com/SagerNet/sing-box/releases/download/v${{ env.singbox_core_last1_version }}/sing-box-${{ env.singbox_core_last1_version }}-linux-amd64.tar.gz" | tar -zx -C ./tools/
            mv -f "./tools/sing-box-${{ env.singbox_core_last1_version }}-linux-amd64/sing-box" ./tools/sing-box
            mkdir -p ./sing-box-ruleset/
            cd ./tools/
             if [[ -f "./convert.sh" ]]; then
              sed -i 's/"version": ${{ env.singbox_rules_last2_version }}/"version": ${{ env.singbox_rules_last1_version }}/' ./convert.sh
              chmod +x ./convert.sh && ./convert.sh
              mv -f ./*.json ./*.srs ../sing-box-ruleset/
            else
              echo "Error: convert.sh not found in ./tools/"
              exit 1
            fi
            rm -rf ./sing-box* ./rules*
          else
            echo "singbox_core_old_version=${{ env.singbox_core_last3_version }}" >> $GITHUB_ENV
            echo "singbox_core_new_version=${{ env.singbox_core_last2_version }}" >> $GITHUB_ENV
            echo "singbox_ruleset_old_version=${{ env.singbox_rules_last3_version }}" >> $GITHUB_ENV
            echo "singbox_ruleset_new_version=${{ env.singbox_rules_last2_version }}" >> $GITHUB_ENV
            echo "singbox_equal=false" >> $GITHUB_ENV

            wget "https://github.com/SagerNet/sing-box/releases/download/v${{ env.singbox_core_last3_version }}/sing-box-${{ env.singbox_core_last3_version }}-linux-amd64.tar.gz" -O - | tar -zxf - -C ./tools/
            mv -f "./tools/sing-box-${{ env.singbox_core_last3_version }}-linux-amd64/sing-box" ./tools/sing-box
            mkdir -p ./sing-box-ruleset-compatible/
            cd ./tools/
             if [[ -f "./convert.sh" ]]; then
              sed -i 's/"version": 1/"version": ${{ env.singbox_rules_last3_version }}/' ./convert.sh
              chmod +x ./convert.sh && ./convert.sh
              mv -f ./*.json ./*.srs ../sing-box-ruleset-compatible/
            else
               echo "Error: convert.sh not found in ./tools/"
               exit 1
            fi
            rm -rf ./sing-box*

            cd ../
            curl -L "https://github.com/SagerNet/sing-box/releases/download/v${{ env.singbox_core_last2_version }}/sing-box-${{ env.singbox_core_last2_version }}-linux-amd64.tar.gz" | tar -zx -C ./tools/
            mv -f "./tools/sing-box-${{ env.singbox_core_last2_version }}-linux-amd64/sing-box" ./tools/sing-box
            mkdir -p ./sing-box-ruleset/
            cd ./tools/
             if [[ -f "./convert.sh" ]]; then
              sed -i 's/"version": ${{ env.singbox_rules_last3_version }}/"version": ${{ env.singbox_rules_last2_version }}/' ./convert.sh
              chmod +x ./convert.sh && ./convert.sh
              mv -f ./*.json ./*.srs ../sing-box-ruleset/
            else
               echo "Error: convert.sh not found in ./tools/"
               exit 1
            fi
            rm -rf ./sing-box* ./rules*
          fi

      - name: Release and upload `mihomo-geodata` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: mihomo-geodata
          tag: mihomo-geodata
          overwrite: true
          body: |
            [mihomo 内核](https://github.com/MetaCubeX/mihomo) geodata 文件
            geodata 文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./mihomo-geodata/*

      - name: Commit and push `mihomo-geodata` branch
        run: |
          cd ./mihomo-geodata/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b mihomo-geodata
          git add . && git commit -m "mihomo 内核 geodata 文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin mihomo-geodata

      - name: Release and upload `mihomo-ruleset` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: mihomo-ruleset
          tag: mihomo-ruleset
          overwrite: true
          body: |
            [mihomo 内核](https://github.com/MetaCubeX/mihomo) rule-set 規則集文件
            規則集文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./mihomo-ruleset/*

      - name: Commit and push `mihomo-ruleset` branch
        run: |
          cd ./mihomo-ruleset/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b mihomo-ruleset
          git add . && git commit -m "mihomo 内核 rule-set 規則集文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin mihomo-ruleset

      - name: Release and upload `mihomo-ruleset-yaml` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: mihomo-ruleset-yaml
          tag: mihomo-ruleset-yaml
          overwrite: true
          body: |
            [mihomo 内核](https://github.com/MetaCubeX/mihomo) YAML rule-set 規則集文件
            規則集文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./mihomo-ruleset-yaml/*

      - name: Commit and push `mihomo-ruleset-yaml` branch
        run: |
          cd ./mihomo-ruleset-yaml/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b mihomo-ruleset-yaml
          git add . && git commit -m "mihomo 内核 YAML rule-set 規則集文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin mihomo-ruleset-yaml

      - name: Release and upload `sing-box-geodata` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box-geodata
          tag: sing-box-geodata
          overwrite: true
          body: |
            [sing-box 内核](https://github.com/SagerNet/sing-box) geodata 文件
            geodata 文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./sing-box-geodata/*

      - name: Commit and push `sing-box-geodata` branch
        run: |
          cd ./sing-box-geodata/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b sing-box-geodata
          git add . && git commit -m "sing-box 内核 geodata 文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin sing-box-geodata

      - name: Release and upload `sing-box-ruleset-compatible` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box-ruleset-compatible
          tag: sing-box-ruleset-compatible
          overwrite: true
          body: |
            [sing-box 内核](https://github.com/SagerNet/sing-box) rule_set 規則集文件
            適用於 v${{ env.singbox_core_old_version }}-v${{ env.singbox_core_new_version }}（不包含）系列版本的 sing-box 内核（`"version": ${{ env.singbox_ruleset_old_version }}`）
            規則集文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./sing-box-ruleset-compatible/*

      - name: Commit and push `sing-box-ruleset-compatible` branch
        run: |
          cd ./sing-box-ruleset-compatible/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b sing-box-ruleset-compatible
          git add . && git commit -m "sing-box 内核 rule_set 規則集文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin sing-box-ruleset-compatible

      - name: Release and upload `sing-box-ruleset` assets
        if: ${{ env.singbox_equal == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box-ruleset
          tag: sing-box-ruleset
          overwrite: true
          body: |
            [sing-box 内核](https://github.com/SagerNet/sing-box) rule_set 規則集文件
            適用於 v${{ env.singbox_core_new_version }} 系列版本的 sing-box 内核（`"version": ${{ env.singbox_ruleset_new_version }}`）
            規則集文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./sing-box-ruleset/*

      - name: Release and upload `sing-box-ruleset` assets
        if: ${{ env.singbox_equal == 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box-ruleset
          tag: sing-box-ruleset
          overwrite: true
          body: |
            [sing-box 内核](https://github.com/SagerNet/sing-box) rule_set 規則集文件
            適用於 v${{ env.singbox_core_new_version }}（包含）+ 系列版本的 sing-box 内核（`"version": ${{ env.singbox_ruleset_new_version }}`）
            規則集文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./sing-box-ruleset/*

      - name: Commit and push `sing-box-ruleset` branch
        run: |
          cd ./sing-box-ruleset/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b sing-box-ruleset
          git add . && git commit -m "sing-box 内核 rule_set 規則集文件更新于 ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin sing-box-ruleset

      - name: Purge jsDelivr CDN
        run: |
          cd ./mihomo-geodata/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@mihomo-geodata/${file}"; done
          cd ../sing-box-geodata/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@sing-box-geodata/${file}"; done
          cd ../mihomo-ruleset/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@mihomo-ruleset/${file}"; done
          cd ../mihomo-ruleset-yaml/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@mihomo-ruleset-yaml/${file}"; done
          cd ../sing-box-ruleset-compatible/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@sing-box-ruleset-compatible/${file}"; done
          cd ../sing-box-ruleset/ || exit 1
          for file in $(ls); do curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@sing-box-ruleset/${file}"; done

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 1
